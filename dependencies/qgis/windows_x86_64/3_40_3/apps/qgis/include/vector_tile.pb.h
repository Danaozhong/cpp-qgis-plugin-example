// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: vector_tile.proto
// Protobuf C++ Version: 5.29.3

#ifndef vector_5ftile_2eproto_2epb_2eh
#define vector_5ftile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_vector_5ftile_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_vector_5ftile_2eproto {
  static const ::uint32_t offsets[];
};
namespace vector_tile {
class Tile;
struct TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
class Tile_Feature;
struct Tile_FeatureDefaultTypeInternal;
extern Tile_FeatureDefaultTypeInternal _Tile_Feature_default_instance_;
class Tile_Layer;
struct Tile_LayerDefaultTypeInternal;
extern Tile_LayerDefaultTypeInternal _Tile_Layer_default_instance_;
class Tile_Value;
struct Tile_ValueDefaultTypeInternal;
extern Tile_ValueDefaultTypeInternal _Tile_Value_default_instance_;
}  // namespace vector_tile
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace vector_tile {
enum Tile_GeomType : int {
  Tile_GeomType_UNKNOWN = 0,
  Tile_GeomType_POINT = 1,
  Tile_GeomType_LINESTRING = 2,
  Tile_GeomType_POLYGON = 3,
};

bool Tile_GeomType_IsValid(int value);
extern const uint32_t Tile_GeomType_internal_data_[];
constexpr Tile_GeomType Tile_GeomType_GeomType_MIN = static_cast<Tile_GeomType>(0);
constexpr Tile_GeomType Tile_GeomType_GeomType_MAX = static_cast<Tile_GeomType>(3);
constexpr int Tile_GeomType_GeomType_ARRAYSIZE = 3 + 1;
const std::string& Tile_GeomType_Name(Tile_GeomType value);
template <typename T>
const std::string& Tile_GeomType_Name(T value) {
  static_assert(std::is_same<T, Tile_GeomType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GeomType_Name().");
  return Tile_GeomType_Name(static_cast<Tile_GeomType>(value));
}
bool Tile_GeomType_Parse(absl::string_view name, Tile_GeomType* value);

// ===================================================================


// -------------------------------------------------------------------

class Tile_Value final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:vector_tile.Tile.Value) */ {
 public:
  inline Tile_Value() : Tile_Value(nullptr) {}
  ~Tile_Value() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tile_Value* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tile_Value));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tile_Value(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tile_Value(const Tile_Value& from) : Tile_Value(nullptr, from) {}
  inline Tile_Value(Tile_Value&& from) noexcept
      : Tile_Value(nullptr, std::move(from)) {}
  inline Tile_Value& operator=(const Tile_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile_Value& operator=(Tile_Value&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Tile_Value& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile_Value* internal_default_instance() {
    return reinterpret_cast<const Tile_Value*>(
        &_Tile_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Tile_Value& a, Tile_Value& b) { a.Swap(&b); }
  inline void Swap(Tile_Value* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile_Value* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile_Value* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Tile_Value>(arena);
  }
  void CopyFrom(const Tile_Value& from);
  void MergeFrom(const Tile_Value& from) { Tile_Value::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tile_Value* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vector_tile.Tile.Value"; }

 protected:
  explicit Tile_Value(::google::protobuf::Arena* arena);
  Tile_Value(::google::protobuf::Arena* arena, const Tile_Value& from);
  Tile_Value(::google::protobuf::Arena* arena, Tile_Value&& from) noexcept
      : Tile_Value(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<23> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStringValueFieldNumber = 1,
    kDoubleValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kFloatValueFieldNumber = 2,
    kBoolValueFieldNumber = 7,
    kUintValueFieldNumber = 5,
    kSintValueFieldNumber = 6,
  };
  // optional string string_value = 1;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // optional double double_value = 3;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // optional int64 int_value = 4;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int64_t int_value() const;
  void set_int_value(::int64_t value);

  private:
  ::int64_t _internal_int_value() const;
  void _internal_set_int_value(::int64_t value);

  public:
  // optional float float_value = 2;
  bool has_float_value() const;
  void clear_float_value() ;
  float float_value() const;
  void set_float_value(float value);

  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);

  public:
  // optional bool bool_value = 7;
  bool has_bool_value() const;
  void clear_bool_value() ;
  bool bool_value() const;
  void set_bool_value(bool value);

  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);

  public:
  // optional uint64 uint_value = 5;
  bool has_uint_value() const;
  void clear_uint_value() ;
  ::uint64_t uint_value() const;
  void set_uint_value(::uint64_t value);

  private:
  ::uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(::uint64_t value);

  public:
  // optional sint64 sint_value = 6;
  bool has_sint_value() const;
  void clear_sint_value() ;
  ::int64_t sint_value() const;
  void set_sint_value(::int64_t value);

  private:
  ::int64_t _internal_sint_value() const;
  void _internal_set_sint_value(::int64_t value);

  public:
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Value, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:vector_tile.Tile.Value)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tile_Value& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
    double double_value_;
    ::int64_t int_value_;
    float float_value_;
    bool bool_value_;
    ::uint64_t uint_value_;
    ::int64_t sint_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class Tile_Feature final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:vector_tile.Tile.Feature) */ {
 public:
  inline Tile_Feature() : Tile_Feature(nullptr) {}
  ~Tile_Feature() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tile_Feature* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tile_Feature));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tile_Feature(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tile_Feature(const Tile_Feature& from) : Tile_Feature(nullptr, from) {}
  inline Tile_Feature(Tile_Feature&& from) noexcept
      : Tile_Feature(nullptr, std::move(from)) {}
  inline Tile_Feature& operator=(const Tile_Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile_Feature& operator=(Tile_Feature&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Tile_Feature& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile_Feature* internal_default_instance() {
    return reinterpret_cast<const Tile_Feature*>(
        &_Tile_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Tile_Feature& a, Tile_Feature& b) { a.Swap(&b); }
  inline void Swap(Tile_Feature* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile_Feature* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile_Feature* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Tile_Feature>(arena);
  }
  void CopyFrom(const Tile_Feature& from);
  void MergeFrom(const Tile_Feature& from) { Tile_Feature::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tile_Feature* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vector_tile.Tile.Feature"; }

 protected:
  explicit Tile_Feature(::google::protobuf::Arena* arena);
  Tile_Feature(::google::protobuf::Arena* arena, const Tile_Feature& from);
  Tile_Feature(::google::protobuf::Arena* arena, Tile_Feature&& from) noexcept
      : Tile_Feature(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<25> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTagsFieldNumber = 2,
    kGeometryFieldNumber = 4,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated uint32 tags = 2 [packed = true];
  int tags_size() const;
  private:
  int _internal_tags_size() const;

  public:
  void clear_tags() ;
  ::uint32_t tags(int index) const;
  void set_tags(int index, ::uint32_t value);
  void add_tags(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& tags() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_tags();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_tags() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_tags();

  public:
  // repeated uint32 geometry = 4 [packed = true];
  int geometry_size() const;
  private:
  int _internal_geometry_size() const;

  public:
  void clear_geometry() ;
  ::uint32_t geometry(int index) const;
  void set_geometry(int index, ::uint32_t value);
  void add_geometry(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& geometry() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_geometry();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_geometry() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_geometry();

  public:
  // optional uint64 id = 1 [default = 0];
  bool has_id() const;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
  bool has_type() const;
  void clear_type() ;
  ::vector_tile::Tile_GeomType type() const;
  void set_type(::vector_tile::Tile_GeomType value);

  private:
  ::vector_tile::Tile_GeomType _internal_type() const;
  void _internal_set_type(::vector_tile::Tile_GeomType value);

  public:
  // @@protoc_insertion_point(class_scope:vector_tile.Tile.Feature)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tile_Feature& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> tags_;
    ::google::protobuf::internal::CachedSize _tags_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> geometry_;
    ::google::protobuf::internal::CachedSize _geometry_cached_byte_size_;
    ::uint64_t id_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class Tile_Layer final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:vector_tile.Tile.Layer) */ {
 public:
  inline Tile_Layer() : Tile_Layer(nullptr) {}
  ~Tile_Layer() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tile_Layer* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tile_Layer));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tile_Layer(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tile_Layer(const Tile_Layer& from) : Tile_Layer(nullptr, from) {}
  inline Tile_Layer(Tile_Layer&& from) noexcept
      : Tile_Layer(nullptr, std::move(from)) {}
  inline Tile_Layer& operator=(const Tile_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile_Layer& operator=(Tile_Layer&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Tile_Layer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile_Layer* internal_default_instance() {
    return reinterpret_cast<const Tile_Layer*>(
        &_Tile_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Tile_Layer& a, Tile_Layer& b) { a.Swap(&b); }
  inline void Swap(Tile_Layer* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile_Layer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile_Layer* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Tile_Layer>(arena);
  }
  void CopyFrom(const Tile_Layer& from);
  void MergeFrom(const Tile_Layer& from) { Tile_Layer::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tile_Layer* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vector_tile.Tile.Layer"; }

 protected:
  explicit Tile_Layer(::google::protobuf::Arena* arena);
  Tile_Layer(::google::protobuf::Arena* arena, const Tile_Layer& from);
  Tile_Layer(::google::protobuf::Arena* arena, Tile_Layer&& from) noexcept
      : Tile_Layer(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<23> _class_data_;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFeaturesFieldNumber = 2,
    kKeysFieldNumber = 3,
    kValuesFieldNumber = 4,
    kNameFieldNumber = 1,
    kExtentFieldNumber = 5,
    kVersionFieldNumber = 15,
  };
  // repeated .vector_tile.Tile.Feature features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;

  public:
  void clear_features() ;
  ::vector_tile::Tile_Feature* mutable_features(int index);
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>* mutable_features();

  private:
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>& _internal_features() const;
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>* _internal_mutable_features();
  public:
  const ::vector_tile::Tile_Feature& features(int index) const;
  ::vector_tile::Tile_Feature* add_features();
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>& features() const;
  // repeated string keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_keys(int index, Arg_&& value, Args_... args);
  std::string* add_keys();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_keys(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // repeated .vector_tile.Tile.Value values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::vector_tile::Tile_Value* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>* _internal_mutable_values();
  public:
  const ::vector_tile::Tile_Value& values(int index) const;
  ::vector_tile::Tile_Value* add_values();
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>& values() const;
  // required string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional uint32 extent = 5 [default = 4096];
  bool has_extent() const;
  void clear_extent() ;
  ::uint32_t extent() const;
  void set_extent(::uint32_t value);

  private:
  ::uint32_t _internal_extent() const;
  void _internal_set_extent(::uint32_t value);

  public:
  // required uint32 version = 15 [default = 1];
  bool has_version() const;
  void clear_version() ;
  ::uint32_t version() const;
  void set_version(::uint32_t value);

  private:
  ::uint32_t _internal_version() const;
  void _internal_set_version(::uint32_t value);

  public:
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile_Layer, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:vector_tile.Tile.Layer)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tile_Layer& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Feature > features_;
    ::google::protobuf::RepeatedPtrField<std::string> keys_;
    ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Value > values_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t extent_;
    ::uint32_t version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vector_5ftile_2eproto;
};
// -------------------------------------------------------------------

class Tile final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:vector_tile.Tile) */ {
 public:
  inline Tile() : Tile(nullptr) {}
  ~Tile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Tile* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Tile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Tile(
      ::google::protobuf::internal::ConstantInitialized);

  inline Tile(const Tile& from) : Tile(nullptr, from) {}
  inline Tile(Tile&& from) noexcept
      : Tile(nullptr, std::move(from)) {}
  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile& operator=(Tile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
        &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Tile& a, Tile& b) { a.Swap(&b); }
  inline void Swap(Tile* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tile* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::MessageLite::DefaultConstruct<Tile>(arena);
  }
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from) { Tile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return IsInitializedImpl(*this);
  }

  private:
  static bool IsInitializedImpl(const MessageLite& msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Tile* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "vector_tile.Tile"; }

 protected:
  explicit Tile(::google::protobuf::Arena* arena);
  Tile(::google::protobuf::Arena* arena, const Tile& from);
  Tile(::google::protobuf::Arena* arena, Tile&& from) noexcept
      : Tile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataLite<17> _class_data_;

 public:
  // nested types ----------------------------------------------------
  using Value = Tile_Value;
  using Feature = Tile_Feature;
  using Layer = Tile_Layer;
  using GeomType = Tile_GeomType;
  static constexpr GeomType UNKNOWN = Tile_GeomType_UNKNOWN;
  static constexpr GeomType POINT = Tile_GeomType_POINT;
  static constexpr GeomType LINESTRING = Tile_GeomType_LINESTRING;
  static constexpr GeomType POLYGON = Tile_GeomType_POLYGON;
  static inline bool GeomType_IsValid(int value) {
    return Tile_GeomType_IsValid(value);
  }
  static constexpr GeomType GeomType_MIN = Tile_GeomType_GeomType_MIN;
  static constexpr GeomType GeomType_MAX = Tile_GeomType_GeomType_MAX;
  static constexpr int GeomType_ARRAYSIZE = Tile_GeomType_GeomType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& GeomType_Name(T value) {
    return Tile_GeomType_Name(value);
  }
  static inline bool GeomType_Parse(absl::string_view name, GeomType* value) {
    return Tile_GeomType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kLayersFieldNumber = 3,
  };
  // repeated .vector_tile.Tile.Layer layers = 3;
  int layers_size() const;
  private:
  int _internal_layers_size() const;

  public:
  void clear_layers() ;
  ::vector_tile::Tile_Layer* mutable_layers(int index);
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>* mutable_layers();

  private:
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>& _internal_layers() const;
  ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>* _internal_mutable_layers();
  public:
  const ::vector_tile::Tile_Layer& layers(int index) const;
  ::vector_tile::Tile_Layer* add_layers();
  const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>& layers() const;
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Singular>
  inline bool HasExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            typename = typename _proto_TypeTraits::Repeated>
  inline int ExtensionSize(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<!_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed,
            std::enable_if_t<_proto_TypeTraits::kLifetimeBound, int> = 0>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::google::protobuf::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::google::protobuf::internal::ExtensionIdentifier<Tile, _proto_TypeTraits,
                                       _field_type, _is_packed>& id)
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:vector_tile.Tile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Tile& from_msg);
    ::google::protobuf::internal::ExtensionSet _extensions_;
    ::google::protobuf::RepeatedPtrField< ::vector_tile::Tile_Layer > layers_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vector_5ftile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Tile_Value

// optional string string_value = 1;
inline bool Tile_Value::has_string_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Tile_Value::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.string_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tile_Value::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tile_Value::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.string_value)
}
inline std::string* Tile_Value::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Value.string_value)
  return _s;
}
inline const std::string& Tile_Value::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.string_value_.Get();
}
inline void Tile_Value::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.string_value_.Set(value, GetArena());
}
inline std::string* Tile_Value::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.string_value_.Mutable( GetArena());
}
inline std::string* Tile_Value::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vector_tile.Tile.Value.string_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.string_value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.string_value_.Set("", GetArena());
  }
  return released;
}
inline void Tile_Value::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.string_value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.string_value_.IsDefault()) {
    _impl_.string_value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vector_tile.Tile.Value.string_value)
}

// optional float float_value = 2;
inline bool Tile_Value::has_float_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Tile_Value::clear_float_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Tile_Value::float_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.float_value)
  return _internal_float_value();
}
inline void Tile_Value::set_float_value(float value) {
  _internal_set_float_value(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.float_value)
}
inline float Tile_Value::_internal_float_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.float_value_;
}
inline void Tile_Value::_internal_set_float_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.float_value_ = value;
}

// optional double double_value = 3;
inline bool Tile_Value::has_double_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Tile_Value::clear_double_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.double_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Tile_Value::double_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.double_value)
  return _internal_double_value();
}
inline void Tile_Value::set_double_value(double value) {
  _internal_set_double_value(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.double_value)
}
inline double Tile_Value::_internal_double_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.double_value_;
}
inline void Tile_Value::_internal_set_double_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.double_value_ = value;
}

// optional int64 int_value = 4;
inline bool Tile_Value::has_int_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Tile_Value::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_value_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Tile_Value::int_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.int_value)
  return _internal_int_value();
}
inline void Tile_Value::set_int_value(::int64_t value) {
  _internal_set_int_value(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.int_value)
}
inline ::int64_t Tile_Value::_internal_int_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_value_;
}
inline void Tile_Value::_internal_set_int_value(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_value_ = value;
}

// optional uint64 uint_value = 5;
inline bool Tile_Value::has_uint_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Tile_Value::clear_uint_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint_value_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Tile_Value::uint_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.uint_value)
  return _internal_uint_value();
}
inline void Tile_Value::set_uint_value(::uint64_t value) {
  _internal_set_uint_value(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.uint_value)
}
inline ::uint64_t Tile_Value::_internal_uint_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint_value_;
}
inline void Tile_Value::_internal_set_uint_value(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint_value_ = value;
}

// optional sint64 sint_value = 6;
inline bool Tile_Value::has_sint_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Tile_Value::clear_sint_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sint_value_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Tile_Value::sint_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.sint_value)
  return _internal_sint_value();
}
inline void Tile_Value::set_sint_value(::int64_t value) {
  _internal_set_sint_value(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.sint_value)
}
inline ::int64_t Tile_Value::_internal_sint_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sint_value_;
}
inline void Tile_Value::_internal_set_sint_value(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sint_value_ = value;
}

// optional bool bool_value = 7;
inline bool Tile_Value::has_bool_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Tile_Value::clear_bool_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_value_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Tile_Value::bool_value() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Value.bool_value)
  return _internal_bool_value();
}
inline void Tile_Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Value.bool_value)
}
inline bool Tile_Value::_internal_bool_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bool_value_;
}
inline void Tile_Value::_internal_set_bool_value(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bool_value_ = value;
}

// -------------------------------------------------------------------

// Tile_Feature

// optional uint64 id = 1 [default = 0];
inline bool Tile_Feature::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Tile_Feature::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Tile_Feature::id() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.id)
  return _internal_id();
}
inline void Tile_Feature::set_id(::uint64_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.id)
}
inline ::uint64_t Tile_Feature::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Tile_Feature::_internal_set_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// repeated uint32 tags = 2 [packed = true];
inline int Tile_Feature::_internal_tags_size() const {
  return _internal_tags().size();
}
inline int Tile_Feature::tags_size() const {
  return _internal_tags_size();
}
inline void Tile_Feature::clear_tags() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tags_.Clear();
}
inline ::uint32_t Tile_Feature::tags(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.tags)
  return _internal_tags().Get(index);
}
inline void Tile_Feature::set_tags(int index, ::uint32_t value) {
  _internal_mutable_tags()->Set(index, value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.tags)
}
inline void Tile_Feature::add_tags(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_tags()->Add(value);
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Feature.tags)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Tile_Feature::tags() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Feature.tags)
  return _internal_tags();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Tile_Feature::mutable_tags()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Feature.tags)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_tags();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
Tile_Feature::_internal_tags() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tags_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Tile_Feature::_internal_mutable_tags() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.tags_;
}

// optional .vector_tile.Tile.GeomType type = 3 [default = UNKNOWN];
inline bool Tile_Feature::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Tile_Feature::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::vector_tile::Tile_GeomType Tile_Feature::type() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.type)
  return _internal_type();
}
inline void Tile_Feature::set_type(::vector_tile::Tile_GeomType value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.type)
}
inline ::vector_tile::Tile_GeomType Tile_Feature::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::vector_tile::Tile_GeomType>(_impl_.type_);
}
inline void Tile_Feature::_internal_set_type(::vector_tile::Tile_GeomType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::vector_tile::Tile_GeomType_IsValid(value));
  _impl_.type_ = value;
}

// repeated uint32 geometry = 4 [packed = true];
inline int Tile_Feature::_internal_geometry_size() const {
  return _internal_geometry().size();
}
inline int Tile_Feature::geometry_size() const {
  return _internal_geometry_size();
}
inline void Tile_Feature::clear_geometry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.geometry_.Clear();
}
inline ::uint32_t Tile_Feature::geometry(int index) const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Feature.geometry)
  return _internal_geometry().Get(index);
}
inline void Tile_Feature::set_geometry(int index, ::uint32_t value) {
  _internal_mutable_geometry()->Set(index, value);
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Feature.geometry)
}
inline void Tile_Feature::add_geometry(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_geometry()->Add(value);
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Feature.geometry)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Tile_Feature::geometry() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Feature.geometry)
  return _internal_geometry();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Tile_Feature::mutable_geometry()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Feature.geometry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_geometry();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
Tile_Feature::_internal_geometry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.geometry_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Tile_Feature::_internal_mutable_geometry() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.geometry_;
}

// -------------------------------------------------------------------

// Tile_Layer

// required uint32 version = 15 [default = 1];
inline bool Tile_Layer::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Tile_Layer::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 1u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Tile_Layer::version() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.version)
  return _internal_version();
}
inline void Tile_Layer::set_version(::uint32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.version)
}
inline ::uint32_t Tile_Layer::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void Tile_Layer::_internal_set_version(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// required string name = 1;
inline bool Tile_Layer::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Tile_Layer::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Tile_Layer::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tile_Layer::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.name)
}
inline std::string* Tile_Layer::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.name)
  return _s;
}
inline const std::string& Tile_Layer::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Tile_Layer::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Tile_Layer::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Tile_Layer::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:vector_tile.Tile.Layer.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void Tile_Layer::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:vector_tile.Tile.Layer.name)
}

// repeated .vector_tile.Tile.Feature features = 2;
inline int Tile_Layer::_internal_features_size() const {
  return _internal_features().size();
}
inline int Tile_Layer::features_size() const {
  return _internal_features_size();
}
inline void Tile_Layer::clear_features() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.features_.Clear();
}
inline ::vector_tile::Tile_Feature* Tile_Layer::mutable_features(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.features)
  return _internal_mutable_features()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>* Tile_Layer::mutable_features()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.features)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_features();
}
inline const ::vector_tile::Tile_Feature& Tile_Layer::features(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.features)
  return _internal_features().Get(index);
}
inline ::vector_tile::Tile_Feature* Tile_Layer::add_features() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::vector_tile::Tile_Feature* _add = _internal_mutable_features()->Add();
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.features)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>& Tile_Layer::features() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.features)
  return _internal_features();
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>&
Tile_Layer::_internal_features() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.features_;
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Feature>*
Tile_Layer::_internal_mutable_features() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.features_;
}

// repeated string keys = 3;
inline int Tile_Layer::_internal_keys_size() const {
  return _internal_keys().size();
}
inline int Tile_Layer::keys_size() const {
  return _internal_keys_size();
}
inline void Tile_Layer::clear_keys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.keys_.Clear();
}
inline std::string* Tile_Layer::add_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:vector_tile.Tile.Layer.keys)
  return _s;
}
inline const std::string& Tile_Layer::keys(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.keys)
  return _internal_keys().Get(index);
}
inline std::string* Tile_Layer::mutable_keys(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.keys)
  return _internal_mutable_keys()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Tile_Layer::set_keys(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_keys()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.keys)
}
template <typename Arg_, typename... Args_>
inline void Tile_Layer::add_keys(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_keys(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Tile_Layer::keys() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.keys)
  return _internal_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Tile_Layer::mutable_keys() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.keys)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Tile_Layer::_internal_keys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Tile_Layer::_internal_mutable_keys() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.keys_;
}

// repeated .vector_tile.Tile.Value values = 4;
inline int Tile_Layer::_internal_values_size() const {
  return _internal_values().size();
}
inline int Tile_Layer::values_size() const {
  return _internal_values_size();
}
inline void Tile_Layer::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::vector_tile::Tile_Value* Tile_Layer::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.Layer.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>* Tile_Layer::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.Layer.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::vector_tile::Tile_Value& Tile_Layer::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.values)
  return _internal_values().Get(index);
}
inline ::vector_tile::Tile_Value* Tile_Layer::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::vector_tile::Tile_Value* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:vector_tile.Tile.Layer.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>& Tile_Layer::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.Layer.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>&
Tile_Layer::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Value>*
Tile_Layer::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// optional uint32 extent = 5 [default = 4096];
inline bool Tile_Layer::has_extent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Tile_Layer::clear_extent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extent_ = 4096u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Tile_Layer::extent() const {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.Layer.extent)
  return _internal_extent();
}
inline void Tile_Layer::set_extent(::uint32_t value) {
  _internal_set_extent(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:vector_tile.Tile.Layer.extent)
}
inline ::uint32_t Tile_Layer::_internal_extent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extent_;
}
inline void Tile_Layer::_internal_set_extent(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extent_ = value;
}

// -------------------------------------------------------------------

// Tile

// repeated .vector_tile.Tile.Layer layers = 3;
inline int Tile::_internal_layers_size() const {
  return _internal_layers().size();
}
inline int Tile::layers_size() const {
  return _internal_layers_size();
}
inline void Tile::clear_layers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.layers_.Clear();
}
inline ::vector_tile::Tile_Layer* Tile::mutable_layers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:vector_tile.Tile.layers)
  return _internal_mutable_layers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>* Tile::mutable_layers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:vector_tile.Tile.layers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_layers();
}
inline const ::vector_tile::Tile_Layer& Tile::layers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:vector_tile.Tile.layers)
  return _internal_layers().Get(index);
}
inline ::vector_tile::Tile_Layer* Tile::add_layers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::vector_tile::Tile_Layer* _add = _internal_mutable_layers()->Add();
  // @@protoc_insertion_point(field_add:vector_tile.Tile.layers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>& Tile::layers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:vector_tile.Tile.layers)
  return _internal_layers();
}
inline const ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>&
Tile::_internal_layers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.layers_;
}
inline ::google::protobuf::RepeatedPtrField<::vector_tile::Tile_Layer>*
Tile::_internal_mutable_layers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.layers_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vector_tile


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::vector_tile::Tile_GeomType> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // vector_5ftile_2eproto_2epb_2eh
